[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Course Schedule",
    "section": "",
    "text": "This schedule is tentative and may be adjusted throughout the semester.\n\n\n\n\nR/Data Viz: Course Overview and Intro to R, Git and GitHub (GitHub Repo)\nGIS: GIS Overview\n\n\n\n\n\n\nR/Data Viz: Data Types and Structures (GitHub Repo)\n\nNew Functions: class(), str(), glimpse(), read_csv(), read_xlsx(), write_xlsx()\n\nGIS: Coordinate Systems and Project Setup\n\n\n\n\n\n\nR/Data Viz: Wrangling with Tidyverse (GitHub Repo)\n\nNew Functions: subset(), filter(), select(), %&gt;%, Logical Operators\n\nGIS: Importing, Selecting and Attributes\n\nNew Tools: Dissolve, Excel to Table, XY Table to Point, Calculate Field\n\n\n\n\n\n\n\nR/Data Viz: Advanced Wrangling and Joins (GitHub Repo)\n\nNew Functions: left_join(), right_join(), full_join(), inner_join(), mutate(), summarize(), case_when(), group_by()\n\nGIS: Clipping, Buffering and Extracting\n\nNew Tools: Clip, Buffer, Extract Values to Points, Hillshade, Symbology\n\n\n\n\n\n\n\nR/Data Viz: Reproducible Reporting in R (GitHub Repo)\n\nNew Resources: Quarto Cheat Sheet, R Markdown Cheatsheet\n\nGIS: Creating Maps\n\n\n\n\n\n\nR/Data Viz: Reshaping Data with Tidyverse (GitHub Repo)\n\nNew Functions: pivot_longer(), pivot_wider(), separate(), unite()\n\nGIS: Merge, Append and Intersect\n\nNew Tools: Merge, Append, Intersect, Spatial Join\n\n\n\n\n\n\n\nR/Data Viz: Data Visualization with ggplot (GitHub Repo)\n\nNew Resources: ggplot2 Cheatsheet\n\nGIS: Extract, Convert and Tabulate\n\nNew Tools: Extract by Mask, Zonal Statistics, Feature to Point, Tabulate Area\n\n\n\n\n\n\n\nR/Data Viz: Data visualizations with ggplot-part2 (GitHub Repo)\n\nNew Resources: ggplot2 Cheatsheet\n\nGIS: Raster Tools\n\nNew Tools: Slope, Aspect, Contour, Raster to Polygon, Raster Calculator\n\n\n\n\n\n\n\nR/Data Viz: For Loops, Conditionals and Functions (GitHub Repo)\n\nNew Functions: for() loops, Conditionals: if, else if, function()\n\nGIS: Creating Shapefiles and Interpolation\n\nNew Tools: Creating/Editing Features, Minimum Bounding Geometry, Create Fishnet, Interpolation Tools\n\n\n\n\n\n\n\nR/Data Viz: Custom Functions (GitHub Repo)\n\nNew Functions: Custom Functions\n\nGIS: ModelBuilder\n\nNew Tools: ModelBuilder\n\n\n\n\n\n\nR/Data Viz: Efficient Programming (GitHub Repo)\n\nNew Functions: nest(), map(), tidy()\n\nGIS: Georeferencing\n\nNew Tools: Georeferencing Tools\n\n\n\n\n\n\n\nR/Data Viz: TBD\nGIS: TBD\n\n\n\n\n\n\nOpen Classroom: In-class time to work on final projects.\n\n\n\n\n\n\nOpen Classroom: In-class time to work on final projects.\n\n\n\n\n\n\n\n\n\n\nFinal Projects Due"
  },
  {
    "objectID": "schedule.html#course-schedule",
    "href": "schedule.html#course-schedule",
    "title": "Course Schedule",
    "section": "",
    "text": "This schedule is tentative and may be adjusted throughout the semester.\n\n\n\n\nR/Data Viz: Course Overview and Intro to R, Git and GitHub (GitHub Repo)\nGIS: GIS Overview\n\n\n\n\n\n\nR/Data Viz: Data Types and Structures (GitHub Repo)\n\nNew Functions: class(), str(), glimpse(), read_csv(), read_xlsx(), write_xlsx()\n\nGIS: Coordinate Systems and Project Setup\n\n\n\n\n\n\nR/Data Viz: Wrangling with Tidyverse (GitHub Repo)\n\nNew Functions: subset(), filter(), select(), %&gt;%, Logical Operators\n\nGIS: Importing, Selecting and Attributes\n\nNew Tools: Dissolve, Excel to Table, XY Table to Point, Calculate Field\n\n\n\n\n\n\n\nR/Data Viz: Advanced Wrangling and Joins (GitHub Repo)\n\nNew Functions: left_join(), right_join(), full_join(), inner_join(), mutate(), summarize(), case_when(), group_by()\n\nGIS: Clipping, Buffering and Extracting\n\nNew Tools: Clip, Buffer, Extract Values to Points, Hillshade, Symbology\n\n\n\n\n\n\n\nR/Data Viz: Reproducible Reporting in R (GitHub Repo)\n\nNew Resources: Quarto Cheat Sheet, R Markdown Cheatsheet\n\nGIS: Creating Maps\n\n\n\n\n\n\nR/Data Viz: Reshaping Data with Tidyverse (GitHub Repo)\n\nNew Functions: pivot_longer(), pivot_wider(), separate(), unite()\n\nGIS: Merge, Append and Intersect\n\nNew Tools: Merge, Append, Intersect, Spatial Join\n\n\n\n\n\n\n\nR/Data Viz: Data Visualization with ggplot (GitHub Repo)\n\nNew Resources: ggplot2 Cheatsheet\n\nGIS: Extract, Convert and Tabulate\n\nNew Tools: Extract by Mask, Zonal Statistics, Feature to Point, Tabulate Area\n\n\n\n\n\n\n\nR/Data Viz: Data visualizations with ggplot-part2 (GitHub Repo)\n\nNew Resources: ggplot2 Cheatsheet\n\nGIS: Raster Tools\n\nNew Tools: Slope, Aspect, Contour, Raster to Polygon, Raster Calculator\n\n\n\n\n\n\n\nR/Data Viz: For Loops, Conditionals and Functions (GitHub Repo)\n\nNew Functions: for() loops, Conditionals: if, else if, function()\n\nGIS: Creating Shapefiles and Interpolation\n\nNew Tools: Creating/Editing Features, Minimum Bounding Geometry, Create Fishnet, Interpolation Tools\n\n\n\n\n\n\n\nR/Data Viz: Custom Functions (GitHub Repo)\n\nNew Functions: Custom Functions\n\nGIS: ModelBuilder\n\nNew Tools: ModelBuilder\n\n\n\n\n\n\nR/Data Viz: Efficient Programming (GitHub Repo)\n\nNew Functions: nest(), map(), tidy()\n\nGIS: Georeferencing\n\nNew Tools: Georeferencing Tools\n\n\n\n\n\n\n\nR/Data Viz: TBD\nGIS: TBD\n\n\n\n\n\n\nOpen Classroom: In-class time to work on final projects.\n\n\n\n\n\n\nOpen Classroom: In-class time to work on final projects.\n\n\n\n\n\n\n\n\n\n\nFinal Projects Due"
  },
  {
    "objectID": "appendix.html",
    "href": "appendix.html",
    "title": "Appendix",
    "section": "",
    "text": "This appendix provides a quick reference for functions and tools covered in class.\n\nR FunctionsArcPro Tools\n\n\n\n\n\n\nDescription: Returns the class or type of an R object.\nExample: class(my_variable)\n\n\n\n\n\n\nDescription: Displays the internal structure of an R object.\nExample: str(iris)\n\n\n\n\n\n\nDescription: A dplyr function that provides a transposed view of str().\nExample: glimpse(iris)\n\n\n\n\n\n\nDescription: A readr function for reading .csv files.\nExample: read_csv(\"my_data.csv\")\n\n\n\n\n\n\nDescription: A readxl function for reading Excel files.\nExample: read_xlsx(\"my_data.xlsx\")\n\n\n\n\n\n\nDescription: A writexl function for writing to an .xlsx file.\nExample: write_xlsx(my_dataframe, \"output.xlsx\")\n\n\n\n\n\n\nDescription: A base R function for selecting rows and columns.\nExample: subset(iris, Species == \"setosa\")\n\n\n\n\n\n\nDescription: A dplyr function to select rows based on their values.\nExample: filter(iris, Sepal.Length &gt; 7)\n\n\n\n\n\n\nDescription: A dplyr function to select columns by name.\nExample: select(iris, Petal.Length, Petal.Width)\n\n\n\n\n\n\nDescription: The pipe operator from magrittr that chains operations together.\nExample: iris %&gt;% filter(Species == \"versicolor\") %&gt;% select(Petal.Width)\n\n\n\n\n\n\nDescription: Used to create conditions for filtering. Includes ==, !=, &gt;, &lt;, & (AND), | (OR).\nExample: filter(iris, Species == \"setosa\" & Petal.Width &gt; 0.2)\n\n\n\n\n\n\nDescription: A dplyr function that returns all rows from the left table (x), and all columns from both x and y.\nExample: left_join(table1, table2, by = \"common_column\")\n\n\n\n\n\n\nDescription: A dplyr function that returns all rows from the right table (y), and all columns from both x and y.\nExample: right_join(table1, table2, by = \"common_column\")\n\n\n\n\n\n\nDescription: A dplyr function that returns all rows and all columns from both tables.\nExample: full_join(table1, table2, by = \"common_column\")\n\n\n\n\n\n\nDescription: A dplyr function that returns only the rows from both tables that have matching values.\nExample: inner_join(table1, table2, by = \"common_column\")\n\n\n\n\n\n\nDescription: A dplyr function that adds new variables or transforms existing ones.\nExample: mutate(iris, Petal.Area = Petal.Length * Petal.Width)\n\n\n\n\n\n\nDescription: A dplyr function that collapses a data frame to a single row with summary statistics.\nExample: summarize(iris, avg_sepal_length = mean(Sepal.Length))\n\n\n\n\n\n\nDescription: A dplyr function for applying multiple if/else conditions.\nExample: mutate(iris, size = case_when(Sepal.Length &gt; 5 ~ \"big\", TRUE ~ \"small\"))\n\n\n\n\n\n\nDescription: A dplyr function used to group a data frame by one or more variables.\nExample: iris %&gt;% group_by(Species) %&gt;% summarize(avg_petal_length = mean(Petal.Length))\n\n\n\n\n\n\nDescription: A tidyr function that “lengthens” data, increasing the number of rows and decreasing the number of columns.\nExample: data %&gt;% pivot_longer(cols = c(col1, col2), names_to = \"variable\", values_to = \"value\")\n\n\n\n\n\n\nDescription: A tidyr function that “widens” data, increasing the number of columns and decreasing the number of rows.\nExample: data %&gt;% pivot_wider(names_from = \"variable\", values_from = \"value\")\n\n\n\n\n\n\nDescription: A tidyr function that splits a single character column into multiple columns.\nExample: data %&gt;% separate(col = \"combined_col\", into = c(\"new_col1\", \"new_col2\"), sep = \"-\")\n\n\n\n\n\n\nDescription: A tidyr function that combines multiple columns into a single character column.\nExample: data %&gt;% unite(\"new_combined_col\", col1, col2, sep = \"_\")\n\n\n\n\n\n\nDescription: Executes a block of code repeatedly for each item in a sequence.\nExample:\nfor (i in 1:5) {\n  print(paste(\"This is loop number\", i))\n}\n\n\n\n\n\n\nDescription: Controls the flow of code execution based on logical conditions.\nExample:\nx &lt;- 10\nif (x &gt; 20) {\n  print(\"x is large\")\n} else if (x &gt; 5) {\n  print(\"x is medium\")\n} else {\n  print(\"x is small\")\n}\n\n\n\n\n\n\nDescription: Creates a new, reusable function to perform a specific task.\nExample:\nadd_numbers &lt;- function(a, b) {\n  return(a + b)\n}\n\n\n\n\n\n\nDescription: A tidyr function that creates a list-column containing data frames. It’s a cornerstone of working with nested data.\nExample: data %&gt;% group_by(group_var) %&gt;% nest()\n\n\n\n\n\n\nDescription: A function from the purrr package that applies a function to each element of a list or vector, returning a list. It’s an alternative to for loops for iterative operations.\nExample: nested_data %&gt;% mutate(model = map(data, ~lm(y ~ x, data = .)))\n\n\n\n\n\n\nDescription: A function from the broom package that takes the messy output of a model and turns it into a tidy data frame.\nExample: model %&gt;% tidy()\n\n\n\n\n\n\n\n\nDescription: Aggregates features based on specified attributes.\n\n\n\n\n\n\nDescription: Converts Microsoft Excel files into a table in your geodatabase.\n\n\n\n\n\n\nDescription: Creates a new point feature class based on x- and y-coordinates in a table.\n\n\n\n\n\n\nDescription: Calculates the values of a field for a feature class or table.\n\n\n\n\n\n\nDescription: Extracts input features that overlay the clip features. Like using a cookie cutter.\n\n\n\n\n\n\nDescription: Creates buffer polygons around input features to a specified distance.\n\n\n\n\n\n\nDescription: Extracts the cell values of a raster based on a set of point features.\n\n\n\n\n\n\nDescription: Creates a shaded relief raster from a digital elevation model (DEM).\n\n\n\n\n\n\nDescription: The process of assigning visual variables to map features to convey information.\n\n\n\n\n\n\nDescription: Combines multiple input datasets of the same data type into a single, new output dataset.\n\n\n\n\n\n\nDescription: Adds features from one or more datasets into an existing target dataset.\n\n\n\n\n\n\nDescription: Computes a geometric intersection of input features. Only the overlapping features are written to the output.\n\n\n\n\n\n\nDescription: Joins attributes from one feature to another based on their spatial relationship.\n\n\n\n\n\n\nDescription: Extracts the cells of a raster that correspond to the areas defined by a mask.\n\n\n\n\n\n\nDescription: Summarizes the values of a raster within the zones of another dataset.\n\n\n\n\n\n\nDescription: Creates a feature class containing points generated from the representative locations of input features.\n\n\n\n\n\n\nDescription: Calculates the area of each feature from one layer that falls within the classes of another raster layer.\n\n\n\n\n\n\nDescription: Calculates the rate of change in elevation for each cell of a raster.\n\n\n\n\n\n\nDescription: Identifies the downslope direction of the maximum rate of change in value from each cell to its neighbors.\n\n\n\n\n\n\nDescription: Creates a line feature class of contours (isolines) from a raster surface.\n\n\n\n\n\n\nDescription: Converts a raster dataset to a polygon feature class.\n\n\n\n\n\n\nDescription: Builds and executes a single Map Algebra expression using a Python syntax.\n\n\n\n\n\n\nDescription: A collection of tools and workflows for creating new vector features and modifying existing ones.\n\n\n\n\n\n\nDescription: Creates a feature class containing polygons or polylines which represent a specified minimum bounding geometry.\n\n\n\n\n\n\nDescription: Creates a net of rectangular cells (a fishnet).\n\n\n\n\n\n\nDescription: A suite of tools (like IDW, Kriging, Spline) used to estimate values at unsampled locations.\n\n\n\n\n\n\nDescription: A visual programming language for building geoprocessing workflows.\n\n\n\n\n\n\nDescription: A set of tools used to align raster or vector data to a known coordinate system. This is often done by creating control points that link locations in the data to known real-world coordinates."
  },
  {
    "objectID": "appendix.html#reference-materials",
    "href": "appendix.html#reference-materials",
    "title": "Appendix",
    "section": "",
    "text": "This appendix provides a quick reference for functions and tools covered in class.\n\nR FunctionsArcPro Tools\n\n\n\n\n\n\nDescription: Returns the class or type of an R object.\nExample: class(my_variable)\n\n\n\n\n\n\nDescription: Displays the internal structure of an R object.\nExample: str(iris)\n\n\n\n\n\n\nDescription: A dplyr function that provides a transposed view of str().\nExample: glimpse(iris)\n\n\n\n\n\n\nDescription: A readr function for reading .csv files.\nExample: read_csv(\"my_data.csv\")\n\n\n\n\n\n\nDescription: A readxl function for reading Excel files.\nExample: read_xlsx(\"my_data.xlsx\")\n\n\n\n\n\n\nDescription: A writexl function for writing to an .xlsx file.\nExample: write_xlsx(my_dataframe, \"output.xlsx\")\n\n\n\n\n\n\nDescription: A base R function for selecting rows and columns.\nExample: subset(iris, Species == \"setosa\")\n\n\n\n\n\n\nDescription: A dplyr function to select rows based on their values.\nExample: filter(iris, Sepal.Length &gt; 7)\n\n\n\n\n\n\nDescription: A dplyr function to select columns by name.\nExample: select(iris, Petal.Length, Petal.Width)\n\n\n\n\n\n\nDescription: The pipe operator from magrittr that chains operations together.\nExample: iris %&gt;% filter(Species == \"versicolor\") %&gt;% select(Petal.Width)\n\n\n\n\n\n\nDescription: Used to create conditions for filtering. Includes ==, !=, &gt;, &lt;, & (AND), | (OR).\nExample: filter(iris, Species == \"setosa\" & Petal.Width &gt; 0.2)\n\n\n\n\n\n\nDescription: A dplyr function that returns all rows from the left table (x), and all columns from both x and y.\nExample: left_join(table1, table2, by = \"common_column\")\n\n\n\n\n\n\nDescription: A dplyr function that returns all rows from the right table (y), and all columns from both x and y.\nExample: right_join(table1, table2, by = \"common_column\")\n\n\n\n\n\n\nDescription: A dplyr function that returns all rows and all columns from both tables.\nExample: full_join(table1, table2, by = \"common_column\")\n\n\n\n\n\n\nDescription: A dplyr function that returns only the rows from both tables that have matching values.\nExample: inner_join(table1, table2, by = \"common_column\")\n\n\n\n\n\n\nDescription: A dplyr function that adds new variables or transforms existing ones.\nExample: mutate(iris, Petal.Area = Petal.Length * Petal.Width)\n\n\n\n\n\n\nDescription: A dplyr function that collapses a data frame to a single row with summary statistics.\nExample: summarize(iris, avg_sepal_length = mean(Sepal.Length))\n\n\n\n\n\n\nDescription: A dplyr function for applying multiple if/else conditions.\nExample: mutate(iris, size = case_when(Sepal.Length &gt; 5 ~ \"big\", TRUE ~ \"small\"))\n\n\n\n\n\n\nDescription: A dplyr function used to group a data frame by one or more variables.\nExample: iris %&gt;% group_by(Species) %&gt;% summarize(avg_petal_length = mean(Petal.Length))\n\n\n\n\n\n\nDescription: A tidyr function that “lengthens” data, increasing the number of rows and decreasing the number of columns.\nExample: data %&gt;% pivot_longer(cols = c(col1, col2), names_to = \"variable\", values_to = \"value\")\n\n\n\n\n\n\nDescription: A tidyr function that “widens” data, increasing the number of columns and decreasing the number of rows.\nExample: data %&gt;% pivot_wider(names_from = \"variable\", values_from = \"value\")\n\n\n\n\n\n\nDescription: A tidyr function that splits a single character column into multiple columns.\nExample: data %&gt;% separate(col = \"combined_col\", into = c(\"new_col1\", \"new_col2\"), sep = \"-\")\n\n\n\n\n\n\nDescription: A tidyr function that combines multiple columns into a single character column.\nExample: data %&gt;% unite(\"new_combined_col\", col1, col2, sep = \"_\")\n\n\n\n\n\n\nDescription: Executes a block of code repeatedly for each item in a sequence.\nExample:\nfor (i in 1:5) {\n  print(paste(\"This is loop number\", i))\n}\n\n\n\n\n\n\nDescription: Controls the flow of code execution based on logical conditions.\nExample:\nx &lt;- 10\nif (x &gt; 20) {\n  print(\"x is large\")\n} else if (x &gt; 5) {\n  print(\"x is medium\")\n} else {\n  print(\"x is small\")\n}\n\n\n\n\n\n\nDescription: Creates a new, reusable function to perform a specific task.\nExample:\nadd_numbers &lt;- function(a, b) {\n  return(a + b)\n}\n\n\n\n\n\n\nDescription: A tidyr function that creates a list-column containing data frames. It’s a cornerstone of working with nested data.\nExample: data %&gt;% group_by(group_var) %&gt;% nest()\n\n\n\n\n\n\nDescription: A function from the purrr package that applies a function to each element of a list or vector, returning a list. It’s an alternative to for loops for iterative operations.\nExample: nested_data %&gt;% mutate(model = map(data, ~lm(y ~ x, data = .)))\n\n\n\n\n\n\nDescription: A function from the broom package that takes the messy output of a model and turns it into a tidy data frame.\nExample: model %&gt;% tidy()\n\n\n\n\n\n\n\n\nDescription: Aggregates features based on specified attributes.\n\n\n\n\n\n\nDescription: Converts Microsoft Excel files into a table in your geodatabase.\n\n\n\n\n\n\nDescription: Creates a new point feature class based on x- and y-coordinates in a table.\n\n\n\n\n\n\nDescription: Calculates the values of a field for a feature class or table.\n\n\n\n\n\n\nDescription: Extracts input features that overlay the clip features. Like using a cookie cutter.\n\n\n\n\n\n\nDescription: Creates buffer polygons around input features to a specified distance.\n\n\n\n\n\n\nDescription: Extracts the cell values of a raster based on a set of point features.\n\n\n\n\n\n\nDescription: Creates a shaded relief raster from a digital elevation model (DEM).\n\n\n\n\n\n\nDescription: The process of assigning visual variables to map features to convey information.\n\n\n\n\n\n\nDescription: Combines multiple input datasets of the same data type into a single, new output dataset.\n\n\n\n\n\n\nDescription: Adds features from one or more datasets into an existing target dataset.\n\n\n\n\n\n\nDescription: Computes a geometric intersection of input features. Only the overlapping features are written to the output.\n\n\n\n\n\n\nDescription: Joins attributes from one feature to another based on their spatial relationship.\n\n\n\n\n\n\nDescription: Extracts the cells of a raster that correspond to the areas defined by a mask.\n\n\n\n\n\n\nDescription: Summarizes the values of a raster within the zones of another dataset.\n\n\n\n\n\n\nDescription: Creates a feature class containing points generated from the representative locations of input features.\n\n\n\n\n\n\nDescription: Calculates the area of each feature from one layer that falls within the classes of another raster layer.\n\n\n\n\n\n\nDescription: Calculates the rate of change in elevation for each cell of a raster.\n\n\n\n\n\n\nDescription: Identifies the downslope direction of the maximum rate of change in value from each cell to its neighbors.\n\n\n\n\n\n\nDescription: Creates a line feature class of contours (isolines) from a raster surface.\n\n\n\n\n\n\nDescription: Converts a raster dataset to a polygon feature class.\n\n\n\n\n\n\nDescription: Builds and executes a single Map Algebra expression using a Python syntax.\n\n\n\n\n\n\nDescription: A collection of tools and workflows for creating new vector features and modifying existing ones.\n\n\n\n\n\n\nDescription: Creates a feature class containing polygons or polylines which represent a specified minimum bounding geometry.\n\n\n\n\n\n\nDescription: Creates a net of rectangular cells (a fishnet).\n\n\n\n\n\n\nDescription: A suite of tools (like IDW, Kriging, Spline) used to estimate values at unsampled locations.\n\n\n\n\n\n\nDescription: A visual programming language for building geoprocessing workflows.\n\n\n\n\n\n\nDescription: A set of tools used to align raster or vector data to a known coordinate system. This is often done by creating control points that link locations in the data to known real-world coordinates."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Wrangling using R and Introduction to GIS applications using ArcPro",
    "section": "",
    "text": "This course provides foundational skills in data science and Geographic Information Systems (GIS). It is divided into two main sections:\n\ndata processing, visualization, and R programming using the tidyverse, and\nan introduction to GIS using ESRI’s ArcPro software.\n\n\n\n\n\n\nThe goal of this section is to give students a broad understanding of data processing, visualization, in the R programming environment. Students will investigate a range of features in the tidyverse package over the course in order to assemble a toolkit for effective data wrangling and visualization.\n\n\n\nThis section is designed to provide students with a practical introduction to Geographic Information Systems (GIS) using ESRI’s ArcPro software. The section will focus on building foundational GIS skills and understanding its practical applications. Each week will introduce new concepts and will cover specific ArcPro tools to enhance hands-on learning.\n\n\n\n\n\n\nMeeting Time: 4 hours of combined lecture and lab per week.\n\nEach class will be roughly divided into two sections:\n\nData wrangling, visualization, and programming, and\nBuilding GIS skills using ArcPro.\n\nA short lecture for each section will introduce the week’s concepts, and then students will complete in-class exercises.\n\n\n\n\nYour final grade will be based on the following components:\n\nClass Participation: 20%\nProject 1: R & Data Visualization: 40%\n\nCreate an R Markdown or Quarto document and serve it as a standalone website (using GitHub pages) showing data wrangling and visualization skills. You can provide your own data from your thesis project or I can help you find a dataset (likely NCRMP related).\n\nProject 2: GIS Mapping: 40%\n\nCreate GIS map(s) in ArcGIS Pro visualizing your data. Again, you can use your own data or NCRMP-related data.\n\n\n\n\n\n\n\nR: The R programming language, available from the Comprehensive R Archive Network (CRAN).\nRStudio: The RStudio Desktop IDE, available from the Posit website.\nArcGIS Pro: ESRI’s desktop GIS software. Licensing and download information will be provided.\nGit: A version control system. Please download and install it from the official Git website.\nGitHub: A web-based platform for version control. You will need to create a free account."
  },
  {
    "objectID": "index.html#course-goals",
    "href": "index.html#course-goals",
    "title": "Data Wrangling using R and Introduction to GIS applications using ArcPro",
    "section": "",
    "text": "The goal of this section is to give students a broad understanding of data processing, visualization, in the R programming environment. Students will investigate a range of features in the tidyverse package over the course in order to assemble a toolkit for effective data wrangling and visualization.\n\n\n\nThis section is designed to provide students with a practical introduction to Geographic Information Systems (GIS) using ESRI’s ArcPro software. The section will focus on building foundational GIS skills and understanding its practical applications. Each week will introduce new concepts and will cover specific ArcPro tools to enhance hands-on learning."
  },
  {
    "objectID": "index.html#course-structure",
    "href": "index.html#course-structure",
    "title": "Data Wrangling using R and Introduction to GIS applications using ArcPro",
    "section": "",
    "text": "Meeting Time: 4 hours of combined lecture and lab per week.\n\nEach class will be roughly divided into two sections:\n\nData wrangling, visualization, and programming, and\nBuilding GIS skills using ArcPro.\n\nA short lecture for each section will introduce the week’s concepts, and then students will complete in-class exercises."
  },
  {
    "objectID": "index.html#evaluation",
    "href": "index.html#evaluation",
    "title": "Data Wrangling using R and Introduction to GIS applications using ArcPro",
    "section": "",
    "text": "Your final grade will be based on the following components:\n\nClass Participation: 20%\nProject 1: R & Data Visualization: 40%\n\nCreate an R Markdown or Quarto document and serve it as a standalone website (using GitHub pages) showing data wrangling and visualization skills. You can provide your own data from your thesis project or I can help you find a dataset (likely NCRMP related).\n\nProject 2: GIS Mapping: 40%\n\nCreate GIS map(s) in ArcGIS Pro visualizing your data. Again, you can use your own data or NCRMP-related data."
  },
  {
    "objectID": "index.html#required-software",
    "href": "index.html#required-software",
    "title": "Data Wrangling using R and Introduction to GIS applications using ArcPro",
    "section": "",
    "text": "R: The R programming language, available from the Comprehensive R Archive Network (CRAN).\nRStudio: The RStudio Desktop IDE, available from the Posit website.\nArcGIS Pro: ESRI’s desktop GIS software. Licensing and download information will be provided.\nGit: A version control system. Please download and install it from the official Git website.\nGitHub: A web-based platform for version control. You will need to create a free account."
  },
  {
    "objectID": "supplemental.html",
    "href": "supplemental.html",
    "title": "Supplemental Materials",
    "section": "",
    "text": "Happy Git and GitHub for the useR"
  }
]